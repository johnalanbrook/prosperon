@block vert
uniform vec4 rect;
uniform vec2 diffuse_size;
void vert()
{
  pos *= vec3(diffuse_size*rect.zw, 1);
  uv = (uv*rect.zw)+rect.xy;
}
@end

@block frag
uniform vec4 border;
// borders in pixels, x = left, y = bottom, z = right, w = top
#define B vec4(10., 20., 30., 20.)

vec2 uv9slice(vec2 uv, vec2 s, vec4 b)
{
  vec2 t = clamp((s * uv - b.xy) / (s - b.xy - b.zw), 0., 1.);
  return mix(uv * s, 1. - s * (1. - uv), t);
}

void frag()
{
  vec2 uv = fragCoord/iResolution.xy;
  vec2 ts = vec2(textureSize(iChannel0, 0));
  // scaling factor
  // probably available as uniform irl
  vec2 s = iResolution.xy / ts;

  // border by texture size, shouldn't be > .5
  // probably available as uniform irl
  vec4 b = min(B / ts.xyxy, vec4(.499));
  uv = uv9slice(uv, s, b);
  
  vec3 col = vec3(texture(iChannel0, uv).x);

  fragColor = vec4(col,1.0);
}
@end

#include <base.cg>